@import "variables";

///  Mixins

@mixin backgroundImage($src, $size){
  background: $src no-repeat;
  background-size: $size;
}

@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}

@mixin responsive-ratio($x,$y, $pseudo: false) {
  $padding: unquote( ( $y / $x ) * 100 + '%' );
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@function unfoldTransition ($transition) {
  $property: all;
  $duration: .2s;
  $easing: null;
  $delay: null;
  $defaultProperties: ($property, $duration, $easing, $delay);

  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

@function getTransitionProperty ($transition) {
  $property: all;
  $defaultProperties: ($property);

  $propertyText: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $propertyText: append($propertyText, $p);
  }

  @if( $propertyText == all){
    @return null;
  }

  @if( $propertyText == visibility){
    @return null;
  }

  @return $propertyText;
}

@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  $willChangeProperties: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
    $prop: getTransitionProperty($transition);
    @if($prop != null){
      $willChangeProperties: append($willChangeProperties, $prop , comma);
    }
  }

  -webkit-transition: $unfoldedTransitions;
  -moz-transition: $unfoldedTransitions;
  -ms-transition: $unfoldedTransitions;
  -o-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
  will-change: $willChangeProperties;
}